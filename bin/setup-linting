#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')
const childProcess = require('child_process')
const R = require('../node_modules/ramda/dist/ramda.js')
const program = require('../node_modules/commander/index.js')

const PACKAGE_PATH = path.resolve('package.json')

program
  .description('setup linting for a project')
  .option('-r, --react', 'Add react stuff')
  .parse(process.argv)

const spawn = R.curry((cmd, args) => {
  const command = childProcess.spawn(cmd, args)
  command.stdout.pipe(process.stdout)
  command.stderr.pipe(process.stderr)
  return new Promise((resolve, reject) => {
    command.on('close', exitCode => {
      if (exitCode === 0) return resolve()
      const spawnArgs = command.spawnargs.join(' ')
      return reject(
        new Error(`Command '${spawnArgs}' failed with exit code ${exitCode}`)
      )
    })
  })
})

const writeFile = R.curry((filepath, data) => {
  return new Promise((resolve, reject) => {
    fs.writeFile(filepath, data, err => {
      return err ? reject(err) : resolve()
    })
  })
})

const dependencies = ['standard', 'eslint']
const eslintConfig = {
  root: true,
  extends: ['standard']
}

if (program.react) {
  dependencies.push('babel-eslint')
  eslintConfig.parser = 'babel-eslint'
  eslintConfig.extends.push('standard-jsx')
  eslintConfig.parserOptions = {
    sourceType: 'module',
    ecmaVersion: 7,
    ecmaFeatures: {
      jsx: true,
      experimentalObjectRestSpread: true
    }
  }
}

spawn('yarn', ['add', '-D'].concat(dependencies))
  .then(() => {
    const pkg = require(PACKAGE_PATH)
    const newPkg = R.merge(pkg, { eslintConfig })
    const pkgContents = `${JSON.stringify(newPkg, null, 2)}\n`
    return writeFile(PACKAGE_PATH, pkgContents)
  })
  .then(() => {
    console.log('done!')
  })
  .catch(err => {
    console.error(err.message)
  })
